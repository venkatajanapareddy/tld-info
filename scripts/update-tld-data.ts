// This script is intended for maintainers to update the TLD data.
// It fetches the latest IANA list and compiles it with basic metadata.

import fs from 'node:fs';
import path from 'node:path';
import type { TLDInfoData, TLDInfoMap, TLDString, TLDType } from '../src/types';
import axios from 'axios';
import { fileURLToPath } from 'node:url';

// Get the directory name properly in ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const IANA_URL = 'https://data.iana.org/TLD/tlds-alpha-by-domain.txt';
const OUTPUT_TS_PATH = path.resolve(__dirname, '../src/tldData.ts');
const OUTPUT_JSON_PATH = path.resolve(__dirname, '../dist/tld-info-data.json');

// Known TLD categories for common TLDs
const KNOWN_GTLDS = new Set([
  'com',
  'net',
  'org',
  'info',
  'biz',
  'name',
  'pro',
  'edu',
  'gov',
  'int',
  'mil',
  'app',
  'dev',
  'io',
  'co',
  'me',
  'tv',
  'xyz',
  'blog',
  'tech',
  'online',
  'site',
  'store',
  'shop',
  'club',
  'cloud',
  'design',
  'live',
  'email',
  'group',
  'news',
  'work',
  'game',
  'games',
  'art',
  'blog',
  'chat',
  'link',
  'page',
  'space',
  'team',
  'zone',
]);

const KNOWN_INFRASTRUCTURE = new Set(['arpa']);
const KNOWN_SPONSORED = new Set([
  'edu',
  'gov',
  'mil',
  'int',
  'aero',
  'coop',
  'museum',
  'post',
  'travel',
  'xxx',
  'jobs',
  'mobi',
  'tel',
]);
const KNOWN_TEST = new Set(['test', 'example', 'invalid', 'localhost']);

async function fetchIANATLDsFromSource(): Promise<string[]> {
  console.log(`Fetching latest TLDs from ${IANA_URL}...`);

  try {
    const response = await axios.get(IANA_URL);
    const textData = response.data as string;

    const tlds = textData
      .split('\n')
      .map((line) => line.trim())
      .filter((line) => line && !line.startsWith('#'))
      .map((tld) => tld.toLowerCase());

    console.log(`Successfully fetched ${tlds.length} TLDs from IANA.`);
    return tlds;
  } catch (error) {
    console.error(
      `Failed to fetch TLDs from IANA: ${error instanceof Error ? error.message : String(error)}`
    );
    console.warn('Using fallback TLD list...');

    // Fallback to a small set of common TLDs
    return [
      'com',
      'net',
      'org',
      'edu',
      'gov',
      'mil',
      'int',
      'io',
      'co',
      'ai',
      'app',
      'dev',
      'us',
      'uk',
      'ca',
      'au',
      'de',
      'fr',
      'jp',
      'cn',
    ];
  }
}

/**
 * Simplified TLD enrichment that focuses on essential metadata
 * without complex web scraping or external data sources.
 */
function enrichSingleTLD(rawTld: string): TLDInfoData {
  const normalizedTld = `.${rawTld}` as TLDString;

  // Default values
  let type: TLDType = 'gTLD';
  let countryCode: string | null = null;
  let hasEmojiFlag = false;
  let registry: string | null = null;
  let status = 'active';

  // Determine TLD type based on known lists and patterns
  if (KNOWN_INFRASTRUCTURE.has(rawTld)) {
    type = 'infrastructure';
  } else if (KNOWN_SPONSORED.has(rawTld)) {
    type = 'sTLD';
  } else if (KNOWN_TEST.has(rawTld)) {
    type = 'test';
    status = 'reserved';
  } else if (KNOWN_GTLDS.has(rawTld)) {
    type = 'gTLD';
  } else if (rawTld.length === 2) {
    // 2-letter TLDs are almost always country codes
    type = 'ccTLD';
    countryCode = rawTld.toUpperCase();
    hasEmojiFlag = true;

    // Special case for UK (GB is the ISO code)
    if (rawTld === 'uk') {
      countryCode = 'GB';
    }
  }

  // Add some basic registry info for well-known TLDs
  if (rawTld === 'com' || rawTld === 'net') {
    registry = 'VeriSign Global Registry Services';
  } else if (rawTld === 'org') {
    registry = 'Public Interest Registry (PIR)';
  } else if (type === 'ccTLD') {
    registry = `${countryCode} Domain Registry`;
  } else {
    registry = 'Unknown Registry';
  }

  return {
    tld: normalizedTld,
    type,
    registry,
    countryCode,
    status,
    createdDate: null, // Skip dates as they require more complex sourcing
    idnSupport: null, // Skip IDN support info
    hasEmojiFlag,
  };
}

async function runUpdate() {
  console.log('Starting TLD data update process...');

  const rawTlds = await fetchIANATLDsFromSource();
  const enrichedTlds: TLDInfoData[] = rawTlds.map(enrichSingleTLD);

  const tldInfoMap: TLDInfoMap = {};
  enrichedTlds.forEach((tldInfo) => {
    tldInfoMap[tldInfo.tld] = tldInfo;
  });

  const tldList: TLDString[] = enrichedTlds.map((info) => info.tld);

  const tsContent = `// This file is auto-generated by scripts/update-tld-data.ts or scripts/compile-data.ts
// Do not edit this file directly.
import type { TLDInfoData, TLDInfoMap, TLDString } from './types';

export const tldInfoList: Readonly<TLDInfoData[]> = Object.freeze(${JSON.stringify(enrichedTlds, null, 2)});

export const tldList: Readonly<TLDString[]> = Object.freeze(${JSON.stringify(tldList, null, 2)});

export const tldInfoMap: Readonly<TLDInfoMap> = Object.freeze(${JSON.stringify(tldInfoMap, null, 2)});
`;

  fs.writeFileSync(OUTPUT_TS_PATH, tsContent, 'utf8');
  console.log(`Successfully updated TypeScript data at ${OUTPUT_TS_PATH}`);

  const distDir = path.dirname(OUTPUT_JSON_PATH);
  if (!fs.existsSync(distDir)) {
    fs.mkdirSync(distDir, { recursive: true });
  }
  fs.writeFileSync(
    OUTPUT_JSON_PATH,
    JSON.stringify(enrichedTlds, null, 2),
    'utf8'
  );
  console.log(`Successfully updated JSON data at ${OUTPUT_JSON_PATH}`);

  console.log('TLD data update process finished.');
}

runUpdate().catch((error) => {
  console.error(
    'Error during TLD data update:',
    error instanceof Error ? error.message : String(error)
  );
  process.exit(1);
});
